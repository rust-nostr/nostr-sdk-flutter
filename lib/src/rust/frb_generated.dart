// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/client.dart';
import 'api/client/builder.dart';
import 'api/client/options.dart';
import 'api/client/output.dart';
import 'api/protocol/event.dart';
import 'api/protocol/event/builder.dart';
import 'api/protocol/event/tag.dart';
import 'api/protocol/event/unsigned.dart';
import 'api/protocol/key.dart';
import 'api/protocol/key/public_key.dart';
import 'api/protocol/key/secret_key.dart';
import 'api/protocol/signer.dart';
import 'api/relay/options.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class NostrSdk
    extends BaseEntrypoint<NostrSdkApi, NostrSdkApiImpl, NostrSdkWire> {
  @internal
  static final instance = NostrSdk._();

  NostrSdk._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    NostrSdkApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<NostrSdkApiImpl, NostrSdkWire> get apiImplConstructor =>
      NostrSdkApiImpl.new;

  @override
  WireConstructor<NostrSdkWire> get wireConstructor =>
      NostrSdkWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0';

  @override
  int get rustContentHash => 1092568859;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'nostr_sdk',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class NostrSdkApi extends BaseApi {
  Future<void> crateApiInitApp();

  Future<bool> crateApiClientClientAddRelay(
      {required Client that, required String url});

  void crateApiClientClientAutomaticAuthentication(
      {required Client that, required bool enable});

  ClientBuilder crateApiClientClientBuilder();

  Future<void> crateApiClientClientConnect({required Client that});

  Future<bool> crateApiClientClientHasSigner({required Client that});

  Client crateApiClientClientNew();

  Future<void> crateApiClientClientReset({required Client that});

  Future<SendEventOutput> crateApiClientClientSendEvent(
      {required Client that, required Event event});

  Future<SendEventOutput> crateApiClientClientSendEventBuilder(
      {required Client that, required EventBuilder builder});

  Future<void> crateApiClientClientSetSigner(
      {required Client that, required NostrSigner signer});

  Future<void> crateApiClientClientShutdown({required Client that});

  Future<NostrSigner> crateApiClientClientSigner({required Client that});

  Future<void> crateApiClientClientUnsetSigner({required Client that});

  Client crateApiClientBuilderClientBuilderBuild({required ClientBuilder that});

  ClientBuilder crateApiClientBuilderClientBuilderNew();

  ClientBuilder crateApiClientBuilderClientBuilderOpts(
      {required ClientBuilder that, required ClientOptions opts});

  ClientBuilder crateApiClientBuilderClientBuilderSigner(
      {required ClientBuilder that, required NostrSigner signer});

  ClientOptions crateApiClientOptionsClientOptionsAutoconnect(
      {required ClientOptions that, required bool val});

  ClientOptions crateApiClientOptionsClientOptionsAutomaticAuthentication(
      {required ClientOptions that, required bool enabled});

  ClientOptions crateApiClientOptionsClientOptionsConnection(
      {required ClientOptions that, required Connection connection});

  ClientOptions crateApiClientOptionsClientOptionsGossip(
      {required ClientOptions that, required bool enabled});

  ClientOptions crateApiClientOptionsClientOptionsMinPow(
      {required ClientOptions that, required int difficulty});

  ClientOptions crateApiClientOptionsClientOptionsNew();

  Connection crateApiClientOptionsConnectionAddr(
      {required Connection that, required String addr});

  Connection crateApiClientOptionsConnectionEmbeddedTor(
      {required Connection that});

  Connection crateApiClientOptionsConnectionEmbeddedTorWithPath(
      {required Connection that, required String dataPath});

  Connection crateApiClientOptionsConnectionMode(
      {required Connection that, required ConnectionMode mode});

  Connection crateApiClientOptionsConnectionNew();

  Connection crateApiClientOptionsConnectionTarget(
      {required Connection that, required ConnectionTarget target});

  String crateApiProtocolEventEventAsJson({required Event that});

  String crateApiProtocolEventEventAsPrettyJson({required Event that});

  PublicKey crateApiProtocolEventEventAuthor({required Event that});

  String crateApiProtocolEventEventContent({required Event that});

  BigInt crateApiProtocolEventEventCreatedAt({required Event that});

  Event crateApiProtocolEventEventFromJson({required String json});

  String crateApiProtocolEventEventId({required Event that});

  bool crateApiProtocolEventEventIsExpired({required Event that});

  bool crateApiProtocolEventEventIsProtected({required Event that});

  int crateApiProtocolEventEventKind({required Event that});

  String crateApiProtocolEventEventSignature({required Event that});

  List<Tag> crateApiProtocolEventEventTags({required Event that});

  void crateApiProtocolEventEventVerify({required Event that});

  bool crateApiProtocolEventEventVerifyId({required Event that});

  bool crateApiProtocolEventEventVerifySignature({required Event that});

  UnsignedEvent crateApiProtocolEventBuilderEventBuilderBuild(
      {required EventBuilder that, required PublicKey publicKey});

  EventBuilder crateApiProtocolEventBuilderEventBuilderCustomCreatedAt(
      {required EventBuilder that, required BigInt createdAt});

  EventBuilder crateApiProtocolEventBuilderEventBuilderNew(
      {required int kind, required String content});

  EventBuilder crateApiProtocolEventBuilderEventBuilderPow(
      {required EventBuilder that, required int difficulty});

  Future<Event> crateApiProtocolEventBuilderEventBuilderSign(
      {required EventBuilder that, required NostrSigner signer});

  Event crateApiProtocolEventBuilderEventBuilderSignWithKeys(
      {required EventBuilder that, required Keys keys});

  EventBuilder crateApiProtocolEventBuilderEventBuilderTag(
      {required EventBuilder that, required Tag tag});

  EventBuilder crateApiProtocolEventBuilderEventBuilderTags(
      {required EventBuilder that, required List<Tag> tags});

  EventBuilder crateApiProtocolEventBuilderEventBuilderTextNote(
      {required String content});

  List<String> crateApiProtocolEventTagTagAsVec({required Tag that});

  String? crateApiProtocolEventTagTagContent({required Tag that});

  bool crateApiProtocolEventTagTagIsProtected({required Tag that});

  bool crateApiProtocolEventTagTagIsReply({required Tag that});

  bool crateApiProtocolEventTagTagIsRoot({required Tag that});

  String crateApiProtocolEventTagTagKind({required Tag that});

  Tag crateApiProtocolEventTagTagParse({required List<String> tag});

  List<String> crateApiProtocolEventTagTagToVec({required Tag that});

  Event crateApiProtocolEventUnsignedUnsignedEventAddSignature(
      {required UnsignedEvent that, required String sig});

  String crateApiProtocolEventUnsignedUnsignedEventAsJson(
      {required UnsignedEvent that});

  String crateApiProtocolEventUnsignedUnsignedEventAsPrettyJson(
      {required UnsignedEvent that});

  PublicKey crateApiProtocolEventUnsignedUnsignedEventAuthor(
      {required UnsignedEvent that});

  String crateApiProtocolEventUnsignedUnsignedEventContent(
      {required UnsignedEvent that});

  BigInt crateApiProtocolEventUnsignedUnsignedEventCreatedAt(
      {required UnsignedEvent that});

  UnsignedEvent crateApiProtocolEventUnsignedUnsignedEventFromJson(
      {required String json});

  String? crateApiProtocolEventUnsignedUnsignedEventId(
      {required UnsignedEvent that});

  int crateApiProtocolEventUnsignedUnsignedEventKind(
      {required UnsignedEvent that});

  List<Tag> crateApiProtocolEventUnsignedUnsignedEventTags(
      {required UnsignedEvent that});

  Keys crateApiProtocolKeyKeysGenerate();

  Keys crateApiProtocolKeyKeysNew({required SecretKey secretKey});

  Keys crateApiProtocolKeyKeysParse({required String secretKey});

  PublicKey crateApiProtocolKeyKeysPublicKey({required Keys that});

  SecretKey crateApiProtocolKeyKeysSecretKey({required Keys that});

  PublicKey crateApiProtocolKeyPublicKeyPublicKeyFromSlice(
      {required List<int> publicKey});

  PublicKey crateApiProtocolKeyPublicKeyPublicKeyParse(
      {required String publicKey});

  String crateApiProtocolKeyPublicKeyPublicKeyToBech32(
      {required PublicKey that});

  String crateApiProtocolKeyPublicKeyPublicKeyToHex({required PublicKey that});

  String crateApiProtocolKeyPublicKeyPublicKeyToNostrUri(
      {required PublicKey that});

  SecretKey crateApiProtocolKeySecretKeySecretKeyFromSlice(
      {required List<int> secretKey});

  SecretKey crateApiProtocolKeySecretKeySecretKeyGenerate();

  SecretKey crateApiProtocolKeySecretKeySecretKeyParse(
      {required String secretKey});

  String crateApiProtocolKeySecretKeySecretKeyToBech32(
      {required SecretKey that});

  String crateApiProtocolKeySecretKeySecretKeyToSecretHex(
      {required SecretKey that});

  SignerBackend crateApiProtocolSignerNostrSignerBackend(
      {required NostrSigner that});

  Future<PublicKey> crateApiProtocolSignerNostrSignerGetPublicKey(
      {required NostrSigner that});

  NostrSigner crateApiProtocolSignerNostrSignerKeys({required Keys keys});

  Future<String> crateApiProtocolSignerNostrSignerNip04Decrypt(
      {required NostrSigner that,
      required PublicKey publicKey,
      required String encryptedContent});

  Future<String> crateApiProtocolSignerNostrSignerNip04Encrypt(
      {required NostrSigner that,
      required PublicKey publicKey,
      required String content});

  Future<String> crateApiProtocolSignerNostrSignerNip44Decrypt(
      {required NostrSigner that,
      required PublicKey publicKey,
      required String payload});

  Future<String> crateApiProtocolSignerNostrSignerNip44Encrypt(
      {required NostrSigner that,
      required PublicKey publicKey,
      required String content});

  Future<Event> crateApiProtocolSignerNostrSignerSignEvent(
      {required NostrSigner that, required UnsignedEvent unsignedEvent});

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Client;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Client;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ClientBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ClientBuilder;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ClientBuilderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ClientOptions;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ClientOptions;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ClientOptionsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Connection;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Connection;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ConnectionPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Event;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Event;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EventPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EventBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EventBuilder;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EventBuilderPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Keys;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Keys;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_KeysPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NostrSigner;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NostrSigner;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_NostrSignerPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PublicKey;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PublicKey;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PublicKeyPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SecretKey;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SecretKey;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SecretKeyPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Tag;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Tag;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TagPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UnsignedEvent;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UnsignedEvent;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_UnsignedEventPtr;
}

class NostrSdkApiImpl extends NostrSdkApiImplPlatform implements NostrSdkApi {
  NostrSdkApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<bool> crateApiClientClientAddRelay(
      {required Client that, required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientAddRelayConstMeta,
      argValues: [that, url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientAddRelayConstMeta =>
      const TaskConstMeta(
        debugName: "Client_add_relay",
        argNames: ["that", "url"],
      );

  @override
  void crateApiClientClientAutomaticAuthentication(
      {required Client that, required bool enable}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_bool(enable, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientClientAutomaticAuthenticationConstMeta,
      argValues: [that, enable],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientAutomaticAuthenticationConstMeta =>
      const TaskConstMeta(
        debugName: "Client_automatic_authentication",
        argNames: ["that", "enable"],
      );

  @override
  ClientBuilder crateApiClientClientBuilder() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientClientBuilderConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientBuilderConstMeta =>
      const TaskConstMeta(
        debugName: "Client_builder",
        argNames: [],
      );

  @override
  Future<void> crateApiClientClientConnect({required Client that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientClientConnectConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientConnectConstMeta =>
      const TaskConstMeta(
        debugName: "Client_connect",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiClientClientHasSigner({required Client that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientClientHasSignerConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientHasSignerConstMeta =>
      const TaskConstMeta(
        debugName: "Client_has_signer",
        argNames: ["that"],
      );

  @override
  Client crateApiClientClientNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientClientNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientNewConstMeta => const TaskConstMeta(
        debugName: "Client_new",
        argNames: [],
      );

  @override
  Future<void> crateApiClientClientReset({required Client that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientResetConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientResetConstMeta => const TaskConstMeta(
        debugName: "Client_reset",
        argNames: ["that"],
      );

  @override
  Future<SendEventOutput> crateApiClientClientSendEvent(
      {required Client that, required Event event}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            event, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_send_event_output,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientSendEventConstMeta,
      argValues: [that, event],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientSendEventConstMeta =>
      const TaskConstMeta(
        debugName: "Client_send_event",
        argNames: ["that", "event"],
      );

  @override
  Future<SendEventOutput> crateApiClientClientSendEventBuilder(
      {required Client that, required EventBuilder builder}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
            builder, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_send_event_output,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientSendEventBuilderConstMeta,
      argValues: [that, builder],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientSendEventBuilderConstMeta =>
      const TaskConstMeta(
        debugName: "Client_send_event_builder",
        argNames: ["that", "builder"],
      );

  @override
  Future<void> crateApiClientClientSetSigner(
      {required Client that, required NostrSigner signer}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            signer, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientClientSetSignerConstMeta,
      argValues: [that, signer],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientSetSignerConstMeta =>
      const TaskConstMeta(
        debugName: "Client_set_signer",
        argNames: ["that", "signer"],
      );

  @override
  Future<void> crateApiClientClientShutdown({required Client that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientShutdownConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientShutdownConstMeta =>
      const TaskConstMeta(
        debugName: "Client_shutdown",
        argNames: ["that"],
      );

  @override
  Future<NostrSigner> crateApiClientClientSigner({required Client that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientClientSignerConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientSignerConstMeta => const TaskConstMeta(
        debugName: "Client_signer",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiClientClientUnsetSigner({required Client that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientClientUnsetSignerConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientClientUnsetSignerConstMeta =>
      const TaskConstMeta(
        debugName: "Client_unset_signer",
        argNames: ["that"],
      );

  @override
  Client crateApiClientBuilderClientBuilderBuild(
      {required ClientBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientBuilderClientBuilderBuildConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientBuilderClientBuilderBuildConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_build",
        argNames: ["that"],
      );

  @override
  ClientBuilder crateApiClientBuilderClientBuilderNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientBuilderClientBuilderNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientBuilderClientBuilderNewConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_new",
        argNames: [],
      );

  @override
  ClientBuilder crateApiClientBuilderClientBuilderOpts(
      {required ClientBuilder that, required ClientOptions opts}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
            opts, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientBuilderClientBuilderOptsConstMeta,
      argValues: [that, opts],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientBuilderClientBuilderOptsConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_opts",
        argNames: ["that", "opts"],
      );

  @override
  ClientBuilder crateApiClientBuilderClientBuilderSigner(
      {required ClientBuilder that, required NostrSigner signer}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            signer, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientBuilderClientBuilderSignerConstMeta,
      argValues: [that, signer],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientBuilderClientBuilderSignerConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_signer",
        argNames: ["that", "signer"],
      );

  @override
  ClientOptions crateApiClientOptionsClientOptionsAutoconnect(
      {required ClientOptions that, required bool val}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
            that, serializer);
        sse_encode_bool(val, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientOptionsClientOptionsAutoconnectConstMeta,
      argValues: [that, val],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientOptionsClientOptionsAutoconnectConstMeta =>
      const TaskConstMeta(
        debugName: "ClientOptions_autoconnect",
        argNames: ["that", "val"],
      );

  @override
  ClientOptions crateApiClientOptionsClientOptionsAutomaticAuthentication(
      {required ClientOptions that, required bool enabled}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
            that, serializer);
        sse_encode_bool(enabled, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiClientOptionsClientOptionsAutomaticAuthenticationConstMeta,
      argValues: [that, enabled],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiClientOptionsClientOptionsAutomaticAuthenticationConstMeta =>
          const TaskConstMeta(
            debugName: "ClientOptions_automatic_authentication",
            argNames: ["that", "enabled"],
          );

  @override
  ClientOptions crateApiClientOptionsClientOptionsConnection(
      {required ClientOptions that, required Connection connection}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
            connection, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientOptionsClientOptionsConnectionConstMeta,
      argValues: [that, connection],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientOptionsClientOptionsConnectionConstMeta =>
      const TaskConstMeta(
        debugName: "ClientOptions_connection",
        argNames: ["that", "connection"],
      );

  @override
  ClientOptions crateApiClientOptionsClientOptionsGossip(
      {required ClientOptions that, required bool enabled}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
            that, serializer);
        sse_encode_bool(enabled, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientOptionsClientOptionsGossipConstMeta,
      argValues: [that, enabled],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientOptionsClientOptionsGossipConstMeta =>
      const TaskConstMeta(
        debugName: "ClientOptions_gossip",
        argNames: ["that", "enabled"],
      );

  @override
  ClientOptions crateApiClientOptionsClientOptionsMinPow(
      {required ClientOptions that, required int difficulty}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
            that, serializer);
        sse_encode_u_8(difficulty, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientOptionsClientOptionsMinPowConstMeta,
      argValues: [that, difficulty],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientOptionsClientOptionsMinPowConstMeta =>
      const TaskConstMeta(
        debugName: "ClientOptions_min_pow",
        argNames: ["that", "difficulty"],
      );

  @override
  ClientOptions crateApiClientOptionsClientOptionsNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientOptionsClientOptionsNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientOptionsClientOptionsNewConstMeta =>
      const TaskConstMeta(
        debugName: "ClientOptions_new",
        argNames: [],
      );

  @override
  Connection crateApiClientOptionsConnectionAddr(
      {required Connection that, required String addr}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
            that, serializer);
        sse_encode_String(addr, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientOptionsConnectionAddrConstMeta,
      argValues: [that, addr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientOptionsConnectionAddrConstMeta =>
      const TaskConstMeta(
        debugName: "Connection_addr",
        argNames: ["that", "addr"],
      );

  @override
  Connection crateApiClientOptionsConnectionEmbeddedTor(
      {required Connection that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientOptionsConnectionEmbeddedTorConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientOptionsConnectionEmbeddedTorConstMeta =>
      const TaskConstMeta(
        debugName: "Connection_embedded_tor",
        argNames: ["that"],
      );

  @override
  Connection crateApiClientOptionsConnectionEmbeddedTorWithPath(
      {required Connection that, required String dataPath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
            that, serializer);
        sse_encode_String(dataPath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientOptionsConnectionEmbeddedTorWithPathConstMeta,
      argValues: [that, dataPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiClientOptionsConnectionEmbeddedTorWithPathConstMeta =>
          const TaskConstMeta(
            debugName: "Connection_embedded_tor_with_path",
            argNames: ["that", "dataPath"],
          );

  @override
  Connection crateApiClientOptionsConnectionMode(
      {required Connection that, required ConnectionMode mode}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
            that, serializer);
        sse_encode_box_autoadd_connection_mode(mode, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiClientOptionsConnectionModeConstMeta,
      argValues: [that, mode],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientOptionsConnectionModeConstMeta =>
      const TaskConstMeta(
        debugName: "Connection_mode",
        argNames: ["that", "mode"],
      );

  @override
  Connection crateApiClientOptionsConnectionNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientOptionsConnectionNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientOptionsConnectionNewConstMeta =>
      const TaskConstMeta(
        debugName: "Connection_new",
        argNames: [],
      );

  @override
  Connection crateApiClientOptionsConnectionTarget(
      {required Connection that, required ConnectionTarget target}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
            that, serializer);
        sse_encode_connection_target(target, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiClientOptionsConnectionTargetConstMeta,
      argValues: [that, target],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClientOptionsConnectionTargetConstMeta =>
      const TaskConstMeta(
        debugName: "Connection_target",
        argNames: ["that", "target"],
      );

  @override
  String crateApiProtocolEventEventAsJson({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventEventAsJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventAsJsonConstMeta =>
      const TaskConstMeta(
        debugName: "Event_as_json",
        argNames: ["that"],
      );

  @override
  String crateApiProtocolEventEventAsPrettyJson({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventEventAsPrettyJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventAsPrettyJsonConstMeta =>
      const TaskConstMeta(
        debugName: "Event_as_pretty_json",
        argNames: ["that"],
      );

  @override
  PublicKey crateApiProtocolEventEventAuthor({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventAuthorConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventAuthorConstMeta =>
      const TaskConstMeta(
        debugName: "Event_author",
        argNames: ["that"],
      );

  @override
  String crateApiProtocolEventEventContent({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventContentConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventContentConstMeta =>
      const TaskConstMeta(
        debugName: "Event_content",
        argNames: ["that"],
      );

  @override
  BigInt crateApiProtocolEventEventCreatedAt({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventCreatedAtConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventCreatedAtConstMeta =>
      const TaskConstMeta(
        debugName: "Event_created_at",
        argNames: ["that"],
      );

  @override
  Event crateApiProtocolEventEventFromJson({required String json}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(json, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventEventFromJsonConstMeta,
      argValues: [json],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventFromJsonConstMeta =>
      const TaskConstMeta(
        debugName: "Event_from_json",
        argNames: ["json"],
      );

  @override
  String crateApiProtocolEventEventId({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventIdConstMeta =>
      const TaskConstMeta(
        debugName: "Event_id",
        argNames: ["that"],
      );

  @override
  bool crateApiProtocolEventEventIsExpired({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventIsExpiredConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventIsExpiredConstMeta =>
      const TaskConstMeta(
        debugName: "Event_is_expired",
        argNames: ["that"],
      );

  @override
  bool crateApiProtocolEventEventIsProtected({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventIsProtectedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventIsProtectedConstMeta =>
      const TaskConstMeta(
        debugName: "Event_is_protected",
        argNames: ["that"],
      );

  @override
  int crateApiProtocolEventEventKind({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventKindConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventKindConstMeta =>
      const TaskConstMeta(
        debugName: "Event_kind",
        argNames: ["that"],
      );

  @override
  String crateApiProtocolEventEventSignature({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventSignatureConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventSignatureConstMeta =>
      const TaskConstMeta(
        debugName: "Event_signature",
        argNames: ["that"],
      );

  @override
  List<Tag> crateApiProtocolEventEventTags({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventTagsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventTagsConstMeta =>
      const TaskConstMeta(
        debugName: "Event_tags",
        argNames: ["that"],
      );

  @override
  void crateApiProtocolEventEventVerify({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventEventVerifyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventVerifyConstMeta =>
      const TaskConstMeta(
        debugName: "Event_verify",
        argNames: ["that"],
      );

  @override
  bool crateApiProtocolEventEventVerifyId({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 44)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventVerifyIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventVerifyIdConstMeta =>
      const TaskConstMeta(
        debugName: "Event_verify_id",
        argNames: ["that"],
      );

  @override
  bool crateApiProtocolEventEventVerifySignature({required Event that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventEventVerifySignatureConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventEventVerifySignatureConstMeta =>
      const TaskConstMeta(
        debugName: "Event_verify_signature",
        argNames: ["that"],
      );

  @override
  UnsignedEvent crateApiProtocolEventBuilderEventBuilderBuild(
      {required EventBuilder that, required PublicKey publicKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            publicKey, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 46)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventBuilderEventBuilderBuildConstMeta,
      argValues: [that, publicKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventBuilderEventBuilderBuildConstMeta =>
      const TaskConstMeta(
        debugName: "EventBuilder_build",
        argNames: ["that", "publicKey"],
      );

  @override
  EventBuilder crateApiProtocolEventBuilderEventBuilderCustomCreatedAt(
      {required EventBuilder that, required BigInt createdAt}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
            that, serializer);
        sse_encode_u_64(createdAt, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 47)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiProtocolEventBuilderEventBuilderCustomCreatedAtConstMeta,
      argValues: [that, createdAt],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventBuilderEventBuilderCustomCreatedAtConstMeta =>
          const TaskConstMeta(
            debugName: "EventBuilder_custom_created_at",
            argNames: ["that", "createdAt"],
          );

  @override
  EventBuilder crateApiProtocolEventBuilderEventBuilderNew(
      {required int kind, required String content}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(kind, serializer);
        sse_encode_String(content, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventBuilderEventBuilderNewConstMeta,
      argValues: [kind, content],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventBuilderEventBuilderNewConstMeta =>
      const TaskConstMeta(
        debugName: "EventBuilder_new",
        argNames: ["kind", "content"],
      );

  @override
  EventBuilder crateApiProtocolEventBuilderEventBuilderPow(
      {required EventBuilder that, required int difficulty}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
            that, serializer);
        sse_encode_u_8(difficulty, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventBuilderEventBuilderPowConstMeta,
      argValues: [that, difficulty],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventBuilderEventBuilderPowConstMeta =>
      const TaskConstMeta(
        debugName: "EventBuilder_pow",
        argNames: ["that", "difficulty"],
      );

  @override
  Future<Event> crateApiProtocolEventBuilderEventBuilderSign(
      {required EventBuilder that, required NostrSigner signer}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            signer, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 50, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventBuilderEventBuilderSignConstMeta,
      argValues: [that, signer],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventBuilderEventBuilderSignConstMeta =>
      const TaskConstMeta(
        debugName: "EventBuilder_sign",
        argNames: ["that", "signer"],
      );

  @override
  Event crateApiProtocolEventBuilderEventBuilderSignWithKeys(
      {required EventBuilder that, required Keys keys}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
            keys, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 51)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventBuilderEventBuilderSignWithKeysConstMeta,
      argValues: [that, keys],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventBuilderEventBuilderSignWithKeysConstMeta =>
          const TaskConstMeta(
            debugName: "EventBuilder_sign_with_keys",
            argNames: ["that", "keys"],
          );

  @override
  EventBuilder crateApiProtocolEventBuilderEventBuilderTag(
      {required EventBuilder that, required Tag tag}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            tag, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 52)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventBuilderEventBuilderTagConstMeta,
      argValues: [that, tag],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventBuilderEventBuilderTagConstMeta =>
      const TaskConstMeta(
        debugName: "EventBuilder_tag",
        argNames: ["that", "tag"],
      );

  @override
  EventBuilder crateApiProtocolEventBuilderEventBuilderTags(
      {required EventBuilder that, required List<Tag> tags}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
            that, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            tags, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 53)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventBuilderEventBuilderTagsConstMeta,
      argValues: [that, tags],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventBuilderEventBuilderTagsConstMeta =>
      const TaskConstMeta(
        debugName: "EventBuilder_tags",
        argNames: ["that", "tags"],
      );

  @override
  EventBuilder crateApiProtocolEventBuilderEventBuilderTextNote(
      {required String content}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(content, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 54)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventBuilderEventBuilderTextNoteConstMeta,
      argValues: [content],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventBuilderEventBuilderTextNoteConstMeta =>
          const TaskConstMeta(
            debugName: "EventBuilder_text_note",
            argNames: ["content"],
          );

  @override
  List<String> crateApiProtocolEventTagTagAsVec({required Tag that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 55)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventTagTagAsVecConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventTagTagAsVecConstMeta =>
      const TaskConstMeta(
        debugName: "Tag_as_vec",
        argNames: ["that"],
      );

  @override
  String? crateApiProtocolEventTagTagContent({required Tag that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 56)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventTagTagContentConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventTagTagContentConstMeta =>
      const TaskConstMeta(
        debugName: "Tag_content",
        argNames: ["that"],
      );

  @override
  bool crateApiProtocolEventTagTagIsProtected({required Tag that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 57)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventTagTagIsProtectedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventTagTagIsProtectedConstMeta =>
      const TaskConstMeta(
        debugName: "Tag_is_protected",
        argNames: ["that"],
      );

  @override
  bool crateApiProtocolEventTagTagIsReply({required Tag that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 58)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventTagTagIsReplyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventTagTagIsReplyConstMeta =>
      const TaskConstMeta(
        debugName: "Tag_is_reply",
        argNames: ["that"],
      );

  @override
  bool crateApiProtocolEventTagTagIsRoot({required Tag that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 59)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventTagTagIsRootConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventTagTagIsRootConstMeta =>
      const TaskConstMeta(
        debugName: "Tag_is_root",
        argNames: ["that"],
      );

  @override
  String crateApiProtocolEventTagTagKind({required Tag that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 60)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventTagTagKindConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventTagTagKindConstMeta =>
      const TaskConstMeta(
        debugName: "Tag_kind",
        argNames: ["that"],
      );

  @override
  Tag crateApiProtocolEventTagTagParse({required List<String> tag}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(tag, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 61)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventTagTagParseConstMeta,
      argValues: [tag],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventTagTagParseConstMeta =>
      const TaskConstMeta(
        debugName: "Tag_parse",
        argNames: ["tag"],
      );

  @override
  List<String> crateApiProtocolEventTagTagToVec({required Tag that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 62)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventTagTagToVecConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventTagTagToVecConstMeta =>
      const TaskConstMeta(
        debugName: "Tag_to_vec",
        argNames: ["that"],
      );

  @override
  Event crateApiProtocolEventUnsignedUnsignedEventAddSignature(
      {required UnsignedEvent that, required String sig}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            that, serializer);
        sse_encode_String(sig, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 63)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiProtocolEventUnsignedUnsignedEventAddSignatureConstMeta,
      argValues: [that, sig],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventUnsignedUnsignedEventAddSignatureConstMeta =>
          const TaskConstMeta(
            debugName: "UnsignedEvent_add_signature",
            argNames: ["that", "sig"],
          );

  @override
  String crateApiProtocolEventUnsignedUnsignedEventAsJson(
      {required UnsignedEvent that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 64)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventUnsignedUnsignedEventAsJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventUnsignedUnsignedEventAsJsonConstMeta =>
          const TaskConstMeta(
            debugName: "UnsignedEvent_as_json",
            argNames: ["that"],
          );

  @override
  String crateApiProtocolEventUnsignedUnsignedEventAsPrettyJson(
      {required UnsignedEvent that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 65)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiProtocolEventUnsignedUnsignedEventAsPrettyJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventUnsignedUnsignedEventAsPrettyJsonConstMeta =>
          const TaskConstMeta(
            debugName: "UnsignedEvent_as_pretty_json",
            argNames: ["that"],
          );

  @override
  PublicKey crateApiProtocolEventUnsignedUnsignedEventAuthor(
      {required UnsignedEvent that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 66)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventUnsignedUnsignedEventAuthorConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventUnsignedUnsignedEventAuthorConstMeta =>
          const TaskConstMeta(
            debugName: "UnsignedEvent_author",
            argNames: ["that"],
          );

  @override
  String crateApiProtocolEventUnsignedUnsignedEventContent(
      {required UnsignedEvent that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 67)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventUnsignedUnsignedEventContentConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventUnsignedUnsignedEventContentConstMeta =>
          const TaskConstMeta(
            debugName: "UnsignedEvent_content",
            argNames: ["that"],
          );

  @override
  BigInt crateApiProtocolEventUnsignedUnsignedEventCreatedAt(
      {required UnsignedEvent that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 68)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventUnsignedUnsignedEventCreatedAtConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventUnsignedUnsignedEventCreatedAtConstMeta =>
          const TaskConstMeta(
            debugName: "UnsignedEvent_created_at",
            argNames: ["that"],
          );

  @override
  UnsignedEvent crateApiProtocolEventUnsignedUnsignedEventFromJson(
      {required String json}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(json, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 69)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolEventUnsignedUnsignedEventFromJsonConstMeta,
      argValues: [json],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolEventUnsignedUnsignedEventFromJsonConstMeta =>
          const TaskConstMeta(
            debugName: "UnsignedEvent_from_json",
            argNames: ["json"],
          );

  @override
  String? crateApiProtocolEventUnsignedUnsignedEventId(
      {required UnsignedEvent that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 70)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventUnsignedUnsignedEventIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventUnsignedUnsignedEventIdConstMeta =>
      const TaskConstMeta(
        debugName: "UnsignedEvent_id",
        argNames: ["that"],
      );

  @override
  int crateApiProtocolEventUnsignedUnsignedEventKind(
      {required UnsignedEvent that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 71)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventUnsignedUnsignedEventKindConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventUnsignedUnsignedEventKindConstMeta =>
      const TaskConstMeta(
        debugName: "UnsignedEvent_kind",
        argNames: ["that"],
      );

  @override
  List<Tag> crateApiProtocolEventUnsignedUnsignedEventTags(
      {required UnsignedEvent that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 72)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolEventUnsignedUnsignedEventTagsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolEventUnsignedUnsignedEventTagsConstMeta =>
      const TaskConstMeta(
        debugName: "UnsignedEvent_tags",
        argNames: ["that"],
      );

  @override
  Keys crateApiProtocolKeyKeysGenerate() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 73)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolKeyKeysGenerateConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyKeysGenerateConstMeta =>
      const TaskConstMeta(
        debugName: "Keys_generate",
        argNames: [],
      );

  @override
  Keys crateApiProtocolKeyKeysNew({required SecretKey secretKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
            secretKey, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 74)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolKeyKeysNewConstMeta,
      argValues: [secretKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyKeysNewConstMeta => const TaskConstMeta(
        debugName: "Keys_new",
        argNames: ["secretKey"],
      );

  @override
  Keys crateApiProtocolKeyKeysParse({required String secretKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(secretKey, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 75)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolKeyKeysParseConstMeta,
      argValues: [secretKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyKeysParseConstMeta =>
      const TaskConstMeta(
        debugName: "Keys_parse",
        argNames: ["secretKey"],
      );

  @override
  PublicKey crateApiProtocolKeyKeysPublicKey({required Keys that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 76)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolKeyKeysPublicKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyKeysPublicKeyConstMeta =>
      const TaskConstMeta(
        debugName: "Keys_public_key",
        argNames: ["that"],
      );

  @override
  SecretKey crateApiProtocolKeyKeysSecretKey({required Keys that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 77)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolKeyKeysSecretKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyKeysSecretKeyConstMeta =>
      const TaskConstMeta(
        debugName: "Keys_secret_key",
        argNames: ["that"],
      );

  @override
  PublicKey crateApiProtocolKeyPublicKeyPublicKeyFromSlice(
      {required List<int> publicKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(publicKey, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 78)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolKeyPublicKeyPublicKeyFromSliceConstMeta,
      argValues: [publicKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyPublicKeyPublicKeyFromSliceConstMeta =>
      const TaskConstMeta(
        debugName: "PublicKey_from_slice",
        argNames: ["publicKey"],
      );

  @override
  PublicKey crateApiProtocolKeyPublicKeyPublicKeyParse(
      {required String publicKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(publicKey, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 79)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolKeyPublicKeyPublicKeyParseConstMeta,
      argValues: [publicKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyPublicKeyPublicKeyParseConstMeta =>
      const TaskConstMeta(
        debugName: "PublicKey_parse",
        argNames: ["publicKey"],
      );

  @override
  String crateApiProtocolKeyPublicKeyPublicKeyToBech32(
      {required PublicKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 80)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolKeyPublicKeyPublicKeyToBech32ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyPublicKeyPublicKeyToBech32ConstMeta =>
      const TaskConstMeta(
        debugName: "PublicKey_to_bech32",
        argNames: ["that"],
      );

  @override
  String crateApiProtocolKeyPublicKeyPublicKeyToHex({required PublicKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 81)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolKeyPublicKeyPublicKeyToHexConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyPublicKeyPublicKeyToHexConstMeta =>
      const TaskConstMeta(
        debugName: "PublicKey_to_hex",
        argNames: ["that"],
      );

  @override
  String crateApiProtocolKeyPublicKeyPublicKeyToNostrUri(
      {required PublicKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 82)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolKeyPublicKeyPublicKeyToNostrUriConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeyPublicKeyPublicKeyToNostrUriConstMeta =>
      const TaskConstMeta(
        debugName: "PublicKey_to_nostr_uri",
        argNames: ["that"],
      );

  @override
  SecretKey crateApiProtocolKeySecretKeySecretKeyFromSlice(
      {required List<int> secretKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(secretKey, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 83)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolKeySecretKeySecretKeyFromSliceConstMeta,
      argValues: [secretKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeySecretKeySecretKeyFromSliceConstMeta =>
      const TaskConstMeta(
        debugName: "SecretKey_from_slice",
        argNames: ["secretKey"],
      );

  @override
  SecretKey crateApiProtocolKeySecretKeySecretKeyGenerate() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 84)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolKeySecretKeySecretKeyGenerateConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeySecretKeySecretKeyGenerateConstMeta =>
      const TaskConstMeta(
        debugName: "SecretKey_generate",
        argNames: [],
      );

  @override
  SecretKey crateApiProtocolKeySecretKeySecretKeyParse(
      {required String secretKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(secretKey, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 85)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolKeySecretKeySecretKeyParseConstMeta,
      argValues: [secretKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeySecretKeySecretKeyParseConstMeta =>
      const TaskConstMeta(
        debugName: "SecretKey_parse",
        argNames: ["secretKey"],
      );

  @override
  String crateApiProtocolKeySecretKeySecretKeyToBech32(
      {required SecretKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 86)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolKeySecretKeySecretKeyToBech32ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolKeySecretKeySecretKeyToBech32ConstMeta =>
      const TaskConstMeta(
        debugName: "SecretKey_to_bech32",
        argNames: ["that"],
      );

  @override
  String crateApiProtocolKeySecretKeySecretKeyToSecretHex(
      {required SecretKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 87)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolKeySecretKeySecretKeyToSecretHexConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProtocolKeySecretKeySecretKeyToSecretHexConstMeta =>
          const TaskConstMeta(
            debugName: "SecretKey_to_secret_hex",
            argNames: ["that"],
          );

  @override
  SignerBackend crateApiProtocolSignerNostrSignerBackend(
      {required NostrSigner that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 88)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_signer_backend,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolSignerNostrSignerBackendConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolSignerNostrSignerBackendConstMeta =>
      const TaskConstMeta(
        debugName: "NostrSigner_backend",
        argNames: ["that"],
      );

  @override
  Future<PublicKey> crateApiProtocolSignerNostrSignerGetPublicKey(
      {required NostrSigner that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 89, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolSignerNostrSignerGetPublicKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolSignerNostrSignerGetPublicKeyConstMeta =>
      const TaskConstMeta(
        debugName: "NostrSigner_get_public_key",
        argNames: ["that"],
      );

  @override
  NostrSigner crateApiProtocolSignerNostrSignerKeys({required Keys keys}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
            keys, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 90)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProtocolSignerNostrSignerKeysConstMeta,
      argValues: [keys],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolSignerNostrSignerKeysConstMeta =>
      const TaskConstMeta(
        debugName: "NostrSigner_keys",
        argNames: ["keys"],
      );

  @override
  Future<String> crateApiProtocolSignerNostrSignerNip04Decrypt(
      {required NostrSigner that,
      required PublicKey publicKey,
      required String encryptedContent}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            publicKey, serializer);
        sse_encode_String(encryptedContent, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 91, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolSignerNostrSignerNip04DecryptConstMeta,
      argValues: [that, publicKey, encryptedContent],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolSignerNostrSignerNip04DecryptConstMeta =>
      const TaskConstMeta(
        debugName: "NostrSigner_nip04_decrypt",
        argNames: ["that", "publicKey", "encryptedContent"],
      );

  @override
  Future<String> crateApiProtocolSignerNostrSignerNip04Encrypt(
      {required NostrSigner that,
      required PublicKey publicKey,
      required String content}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            publicKey, serializer);
        sse_encode_String(content, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 92, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolSignerNostrSignerNip04EncryptConstMeta,
      argValues: [that, publicKey, content],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolSignerNostrSignerNip04EncryptConstMeta =>
      const TaskConstMeta(
        debugName: "NostrSigner_nip04_encrypt",
        argNames: ["that", "publicKey", "content"],
      );

  @override
  Future<String> crateApiProtocolSignerNostrSignerNip44Decrypt(
      {required NostrSigner that,
      required PublicKey publicKey,
      required String payload}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            publicKey, serializer);
        sse_encode_String(payload, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 93, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolSignerNostrSignerNip44DecryptConstMeta,
      argValues: [that, publicKey, payload],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolSignerNostrSignerNip44DecryptConstMeta =>
      const TaskConstMeta(
        debugName: "NostrSigner_nip44_decrypt",
        argNames: ["that", "publicKey", "payload"],
      );

  @override
  Future<String> crateApiProtocolSignerNostrSignerNip44Encrypt(
      {required NostrSigner that,
      required PublicKey publicKey,
      required String content}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
            publicKey, serializer);
        sse_encode_String(content, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 94, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolSignerNostrSignerNip44EncryptConstMeta,
      argValues: [that, publicKey, content],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolSignerNostrSignerNip44EncryptConstMeta =>
      const TaskConstMeta(
        debugName: "NostrSigner_nip44_encrypt",
        argNames: ["that", "publicKey", "content"],
      );

  @override
  Future<Event> crateApiProtocolSignerNostrSignerSignEvent(
      {required NostrSigner that, required UnsignedEvent unsignedEvent}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
            unsignedEvent, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 95, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiProtocolSignerNostrSignerSignEventConstMeta,
      argValues: [that, unsignedEvent],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtocolSignerNostrSignerSignEventConstMeta =>
      const TaskConstMeta(
        debugName: "NostrSigner_sign_event",
        argNames: ["that", "unsignedEvent"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Client => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Client => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ClientBuilder => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ClientBuilder => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ClientOptions => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ClientOptions => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Connection => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Connection => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Event =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Event =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EventBuilder => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EventBuilder => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Keys =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Keys =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NostrSigner => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NostrSigner => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PublicKey => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PublicKey => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SecretKey => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SecretKey => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Tag => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Tag => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UnsignedEvent => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UnsignedEvent => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Client
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientBuilder
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientOptions
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientOptionsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Connection
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Event
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EventBuilder
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Keys
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeysImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NostrSigner
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NostrSignerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PublicKey
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PublicKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SecretKey
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SecretKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Tag dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TagImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UnsignedEvent
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UnsignedEventImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Client
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientBuilder
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientOptions
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientOptionsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Connection
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Event
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EventBuilder
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Keys
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeysImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NostrSigner
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NostrSignerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PublicKey
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PublicKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SecretKey
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SecretKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Tag dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TagImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UnsignedEvent
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UnsignedEventImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Client
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientBuilder
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientOptions
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientOptionsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Connection
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Event
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EventBuilder
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Keys
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeysImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NostrSigner
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NostrSignerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PublicKey
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PublicKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SecretKey
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SecretKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Tag dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TagImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UnsignedEvent
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UnsignedEventImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Set<String> dco_decode_Set_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(dco_decode_list_String(raw));
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ConnectionMode dco_decode_box_autoadd_connection_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_connection_mode(raw);
  }

  @protected
  ConnectionMode dco_decode_connection_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ConnectionMode_Direct();
      case 1:
        return ConnectionMode_Proxy(
          addr: dco_decode_String(raw[1]),
        );
      case 2:
        return ConnectionMode_Tor(
          customPath: dco_decode_opt_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ConnectionTarget dco_decode_connection_target(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConnectionTarget.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<Tag>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag)
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  SendEventOutput dco_decode_send_event_output(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SendEventOutput(
      id: dco_decode_String(arr[0]),
      success: dco_decode_Set_String(arr[1]),
      failed: dco_decode_Map_String_String(arr[2]),
    );
  }

  @protected
  SignerBackend dco_decode_signer_backend(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SignerBackend_Keys();
      case 1:
        return SignerBackend_BrowserExtension();
      case 2:
        return SignerBackend_NostrConnect();
      case 3:
        return SignerBackend_Custom(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Client
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientBuilder
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientOptions
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientOptionsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Connection
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConnectionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Event
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EventBuilder
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Keys
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeysImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NostrSigner
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NostrSignerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PublicKey
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PublicKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SecretKey
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SecretKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Tag sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TagImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UnsignedEvent
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UnsignedEventImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Client
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientBuilder
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientOptions
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientOptionsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Connection
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConnectionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Event
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EventBuilder
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Keys
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeysImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NostrSigner
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NostrSignerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PublicKey
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PublicKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SecretKey
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SecretKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Tag sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TagImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UnsignedEvent
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UnsignedEventImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Map<String, String> sse_decode_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Client
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientBuilder
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientOptions
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientOptionsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Connection
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConnectionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Event
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EventBuilder
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Keys
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeysImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NostrSigner
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NostrSignerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PublicKey
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PublicKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SecretKey
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SecretKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Tag sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TagImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UnsignedEvent
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UnsignedEventImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Set<String> sse_decode_Set_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_String(deserializer);
    return Set.from(inner);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  ConnectionMode sse_decode_box_autoadd_connection_mode(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_connection_mode(deserializer));
  }

  @protected
  ConnectionMode sse_decode_connection_mode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return ConnectionMode_Direct();
      case 1:
        var var_addr = sse_decode_String(deserializer);
        return ConnectionMode_Proxy(addr: var_addr);
      case 2:
        var var_customPath = sse_decode_opt_String(deserializer);
        return ConnectionMode_Tor(customPath: var_customPath);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ConnectionTarget sse_decode_connection_target(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ConnectionTarget.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<Tag>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Tag>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  SendEventOutput sse_decode_send_event_output(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_success = sse_decode_Set_String(deserializer);
    var var_failed = sse_decode_Map_String_String(deserializer);
    return SendEventOutput(
        id: var_id, success: var_success, failed: var_failed);
  }

  @protected
  SignerBackend sse_decode_signer_backend(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SignerBackend_Keys();
      case 1:
        return SignerBackend_BrowserExtension();
      case 2:
        return SignerBackend_NostrConnect();
      case 3:
        var var_field0 = sse_decode_String(deserializer);
        return SignerBackend_Custom(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
          Client self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
          ClientBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientBuilderImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
          ClientOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientOptionsImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
          Connection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConnectionImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          Event self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
          EventBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventBuilderImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
          Keys self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeysImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
          NostrSigner self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NostrSignerImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          PublicKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PublicKeyImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
          SecretKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SecretKeyImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
          Tag self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TagImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
          UnsignedEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UnsignedEventImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
          Client self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
          ClientBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientBuilderImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
          ClientOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientOptionsImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
          Connection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConnectionImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          Event self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
          EventBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventBuilderImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
          Keys self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeysImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
          NostrSigner self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NostrSignerImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          PublicKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PublicKeyImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
          SecretKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SecretKeyImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
          Tag self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TagImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
          UnsignedEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UnsignedEventImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void sse_encode_Map_String_String(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Client(
          Client self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientBuilder(
          ClientBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientBuilderImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_ClientOptions(
          ClientOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientOptionsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Connection(
          Connection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConnectionImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Event(
          Event self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_EventBuilder(
          EventBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventBuilderImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Keys(
          Keys self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeysImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_NostrSigner(
          NostrSigner self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NostrSignerImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PublicKey(
          PublicKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PublicKeyImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_SecretKey(
          SecretKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SecretKeyImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
          Tag self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TagImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_UnsignedEvent(
          UnsignedEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UnsignedEventImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_Set_String(Set<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.toList(), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_connection_mode(
      ConnectionMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_connection_mode(self, serializer);
  }

  @protected
  void sse_encode_connection_mode(
      ConnectionMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ConnectionMode_Direct():
        sse_encode_i_32(0, serializer);
      case ConnectionMode_Proxy(addr: final addr):
        sse_encode_i_32(1, serializer);
        sse_encode_String(addr, serializer);
      case ConnectionMode_Tor(customPath: final customPath):
        sse_encode_i_32(2, serializer);
        sse_encode_opt_String(customPath, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_connection_target(
      ConnectionTarget self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
          List<Tag> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Tag(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_send_event_output(
      SendEventOutput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_Set_String(self.success, serializer);
    sse_encode_Map_String_String(self.failed, serializer);
  }

  @protected
  void sse_encode_signer_backend(SignerBackend self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SignerBackend_Keys():
        sse_encode_i_32(0, serializer);
      case SignerBackend_BrowserExtension():
        sse_encode_i_32(1, serializer);
      case SignerBackend_NostrConnect():
        sse_encode_i_32(2, serializer);
      case SignerBackend_Custom(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_String(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class ClientBuilderImpl extends RustOpaque implements ClientBuilder {
  // Not to be used by end users
  ClientBuilderImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ClientBuilderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_ClientBuilder,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_ClientBuilder,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_ClientBuilderPtr,
  );

  /// Build client
  Client build() =>
      NostrSdk.instance.api.crateApiClientBuilderClientBuilderBuild(
        that: this,
      );

  /// Set opts
  ClientBuilder opts({required ClientOptions opts}) => NostrSdk.instance.api
      .crateApiClientBuilderClientBuilderOpts(that: this, opts: opts);

  /// Set signer
  ClientBuilder signer({required NostrSigner signer}) => NostrSdk.instance.api
      .crateApiClientBuilderClientBuilderSigner(that: this, signer: signer);
}

@sealed
class ClientImpl extends RustOpaque implements Client {
  // Not to be used by end users
  ClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_Client,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_Client,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_ClientPtr,
  );

  /// Add relay
  ///
  /// Relays added with this method will have both `READ` and `WRITE` flags enabled.
  ///
  /// If the relay already exists, the flags will be updated and `false` returned.
  ///
  /// If are set pool subscriptions, the new added relay will inherit them.
  ///
  /// Connection is **NOT** automatically started with relay, remember to call `connect` method!
  Future<bool> addRelay({required String url}) =>
      NostrSdk.instance.api.crateApiClientClientAddRelay(that: this, url: url);

  /// Auto authenticate to relays (default: true)
  ///
  /// <https://github.com/nostr-protocol/nips/blob/master/42.md>
  void automaticAuthentication({required bool enable}) => NostrSdk.instance.api
      .crateApiClientClientAutomaticAuthentication(that: this, enable: enable);

  /// Connect to all added relays
  Future<void> connect() => NostrSdk.instance.api.crateApiClientClientConnect(
        that: this,
      );

  /// Check if signer is configured
  Future<bool> hasSigner() =>
      NostrSdk.instance.api.crateApiClientClientHasSigner(
        that: this,
      );

  /// Reset client
  ///
  /// This method reset the client to simplify the switch to another account.
  Future<void> reset() => NostrSdk.instance.api.crateApiClientClientReset(
        that: this,
      );

  /// Send event
  ///
  /// Send `Event` to all relays with `WRITE` flag.
  /// If `gossip` option is enabled, the event will be sent also to NIP65 relays (automatically discovered).
  Future<SendEventOutput> sendEvent({required Event event}) =>
      NostrSdk.instance.api
          .crateApiClientClientSendEvent(that: this, event: event);

  /// Send event
  ///
  /// Take an [`EventBuilder`], sign it by using the [`NostrSigner`] and broadcast to relays (check [`Client::send_event`] from more details).
  ///
  /// Return an error if the [`NostrSigner`] is not set.
  Future<SendEventOutput> sendEventBuilder({required EventBuilder builder}) =>
      NostrSdk.instance.api
          .crateApiClientClientSendEventBuilder(that: this, builder: builder);

  /// Set nostr signer
  Future<void> setSigner({required NostrSigner signer}) => NostrSdk.instance.api
      .crateApiClientClientSetSigner(that: this, signer: signer);

  /// Completely shutdown client
  Future<void> shutdown() => NostrSdk.instance.api.crateApiClientClientShutdown(
        that: this,
      );

  /// Get current nostr signer
  ///
  /// Rise error if it not set.
  Future<NostrSigner> signer() =>
      NostrSdk.instance.api.crateApiClientClientSigner(
        that: this,
      );

  /// Unset nostr signer
  Future<void> unsetSigner() =>
      NostrSdk.instance.api.crateApiClientClientUnsetSigner(
        that: this,
      );
}

@sealed
class ClientOptionsImpl extends RustOpaque implements ClientOptions {
  // Not to be used by end users
  ClientOptionsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ClientOptionsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_ClientOptions,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_ClientOptions,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_ClientOptionsPtr,
  );

  /// Automatically start connection with relays (default: false)
  ///
  /// When set to `true`, there isn't the need of calling the connect methods.
  ClientOptions autoconnect({required bool val}) => NostrSdk.instance.api
      .crateApiClientOptionsClientOptionsAutoconnect(that: this, val: val);

  /// Auto authenticate to relays (default: true)
  ///
  /// <https://github.com/nostr-protocol/nips/blob/master/42.md>
  ClientOptions automaticAuthentication({required bool enabled}) =>
      NostrSdk.instance.api
          .crateApiClientOptionsClientOptionsAutomaticAuthentication(
              that: this, enabled: enabled);

  /// Connection
  ClientOptions connection({required Connection connection}) =>
      NostrSdk.instance.api.crateApiClientOptionsClientOptionsConnection(
          that: this, connection: connection);

  /// Enable gossip model (default: false)
  ClientOptions gossip({required bool enabled}) => NostrSdk.instance.api
      .crateApiClientOptionsClientOptionsGossip(that: this, enabled: enabled);

  /// Minimum POW difficulty for received events
  ClientOptions minPow({required int difficulty}) =>
      NostrSdk.instance.api.crateApiClientOptionsClientOptionsMinPow(
          that: this, difficulty: difficulty);
}

@sealed
class ConnectionImpl extends RustOpaque implements Connection {
  // Not to be used by end users
  ConnectionImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConnectionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_Connection,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_Connection,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_ConnectionPtr,
  );

  /// Set proxy (ex. `127.0.0.1:9050`)
  Connection addr({required String addr}) => NostrSdk.instance.api
      .crateApiClientOptionsConnectionAddr(that: this, addr: addr);

  /// Use embedded tor client
  ///
  /// This not work on `android` and/or `ios` targets.
  /// Use [`Connection::embedded_tor_with_path`] instead.
  Connection embeddedTor() =>
      NostrSdk.instance.api.crateApiClientOptionsConnectionEmbeddedTor(
        that: this,
      );

  /// Use embedded tor client
  ///
  /// Specify a path where to store data
  Connection embeddedTorWithPath({required String dataPath}) =>
      NostrSdk.instance.api.crateApiClientOptionsConnectionEmbeddedTorWithPath(
          that: this, dataPath: dataPath);

  /// Set connection mode (default: direct)
  Connection mode({required ConnectionMode mode}) => NostrSdk.instance.api
      .crateApiClientOptionsConnectionMode(that: this, mode: mode);

  /// Set connection target (default: all)
  Connection target({required ConnectionTarget target}) => NostrSdk.instance.api
      .crateApiClientOptionsConnectionTarget(that: this, target: target);
}

@sealed
class EventBuilderImpl extends RustOpaque implements EventBuilder {
  // Not to be used by end users
  EventBuilderImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EventBuilderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_EventBuilder,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_EventBuilder,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_EventBuilderPtr,
  );

  /// Build unsigned event
  UnsignedEvent build({required PublicKey publicKey}) =>
      NostrSdk.instance.api.crateApiProtocolEventBuilderEventBuilderBuild(
          that: this, publicKey: publicKey);

  /// Set a custom `created_at` UNIX timestamp
  EventBuilder customCreatedAt({required BigInt createdAt}) => NostrSdk
      .instance.api
      .crateApiProtocolEventBuilderEventBuilderCustomCreatedAt(
          that: this, createdAt: createdAt);

  /// Set POW difficulty
  ///
  /// Only values `> 0` are accepted!
  EventBuilder pow({required int difficulty}) =>
      NostrSdk.instance.api.crateApiProtocolEventBuilderEventBuilderPow(
          that: this, difficulty: difficulty);

  /// Build, sign and return event
  Future<Event> sign({required NostrSigner signer}) => NostrSdk.instance.api
      .crateApiProtocolEventBuilderEventBuilderSign(that: this, signer: signer);

  /// Build, sign and return event using keys signer
  Event signWithKeys({required Keys keys}) => NostrSdk.instance.api
      .crateApiProtocolEventBuilderEventBuilderSignWithKeys(
          that: this, keys: keys);

  /// Add tag
  EventBuilder tag({required Tag tag}) => NostrSdk.instance.api
      .crateApiProtocolEventBuilderEventBuilderTag(that: this, tag: tag);

  /// Add tags
  ///
  /// This method extends the current tags (if any).
  EventBuilder tags({required List<Tag> tags}) => NostrSdk.instance.api
      .crateApiProtocolEventBuilderEventBuilderTags(that: this, tags: tags);
}

@sealed
class EventImpl extends RustOpaque implements Event {
  // Not to be used by end users
  EventImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EventImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_Event,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_Event,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_EventPtr,
  );

  /// Serialize as JSON
  String asJson() => NostrSdk.instance.api.crateApiProtocolEventEventAsJson(
        that: this,
      );

  /// Serialize as pretty JSON
  String asPrettyJson() =>
      NostrSdk.instance.api.crateApiProtocolEventEventAsPrettyJson(
        that: this,
      );

  /// Get event author (`pubkey` field)
  PublicKey author() => NostrSdk.instance.api.crateApiProtocolEventEventAuthor(
        that: this,
      );

  /// Get event content
  String content() => NostrSdk.instance.api.crateApiProtocolEventEventContent(
        that: this,
      );

  /// Get UNIX timestamp
  BigInt createdAt() =>
      NostrSdk.instance.api.crateApiProtocolEventEventCreatedAt(
        that: this,
      );

  /// Get event ID
  String id() => NostrSdk.instance.api.crateApiProtocolEventEventId(
        that: this,
      );

  /// Returns `true` if the event has an expiration tag that is expired.
  /// If an event has no expiration tag, then it will return `false`.
  ///
  /// <https://github.com/nostr-protocol/nips/blob/master/40.md>
  bool isExpired() => NostrSdk.instance.api.crateApiProtocolEventEventIsExpired(
        that: this,
      );

  /// Check if it's a protected event
  ///
  /// <https://github.com/nostr-protocol/nips/blob/master/70.md>
  bool isProtected() =>
      NostrSdk.instance.api.crateApiProtocolEventEventIsProtected(
        that: this,
      );

  /// Get event kind
  int kind() => NostrSdk.instance.api.crateApiProtocolEventEventKind(
        that: this,
      );

  /// Get event signature
  String signature() =>
      NostrSdk.instance.api.crateApiProtocolEventEventSignature(
        that: this,
      );

  /// Get event tags
  List<Tag> tags() => NostrSdk.instance.api.crateApiProtocolEventEventTags(
        that: this,
      );

  /// Verify both the event ID and the signature
  void verify() => NostrSdk.instance.api.crateApiProtocolEventEventVerify(
        that: this,
      );

  /// Verify if the event ID it's composed correctly
  bool verifyId() => NostrSdk.instance.api.crateApiProtocolEventEventVerifyId(
        that: this,
      );

  /// Verify only the event signature
  bool verifySignature() =>
      NostrSdk.instance.api.crateApiProtocolEventEventVerifySignature(
        that: this,
      );
}

@sealed
class KeysImpl extends RustOpaque implements Keys {
  // Not to be used by end users
  KeysImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  KeysImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_Keys,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_Keys,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_KeysPtr,
  );

  /// Get public key
  PublicKey publicKey() =>
      NostrSdk.instance.api.crateApiProtocolKeyKeysPublicKey(
        that: this,
      );

  /// Get secret key
  SecretKey secretKey() =>
      NostrSdk.instance.api.crateApiProtocolKeyKeysSecretKey(
        that: this,
      );
}

@sealed
class NostrSignerImpl extends RustOpaque implements NostrSigner {
  // Not to be used by end users
  NostrSignerImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NostrSignerImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_NostrSigner,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_NostrSigner,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_NostrSignerPtr,
  );

  /// Get backend
  SignerBackend backend() =>
      NostrSdk.instance.api.crateApiProtocolSignerNostrSignerBackend(
        that: this,
      );

  /// Get public key
  Future<PublicKey> getPublicKey() =>
      NostrSdk.instance.api.crateApiProtocolSignerNostrSignerGetPublicKey(
        that: this,
      );

  /// Decrypt
  Future<String> nip04Decrypt(
          {required PublicKey publicKey, required String encryptedContent}) =>
      NostrSdk.instance.api.crateApiProtocolSignerNostrSignerNip04Decrypt(
          that: this, publicKey: publicKey, encryptedContent: encryptedContent);

  /// Encrypt
  Future<String> nip04Encrypt(
          {required PublicKey publicKey, required String content}) =>
      NostrSdk.instance.api.crateApiProtocolSignerNostrSignerNip04Encrypt(
          that: this, publicKey: publicKey, content: content);

  /// Decrypt
  Future<String> nip44Decrypt(
          {required PublicKey publicKey, required String payload}) =>
      NostrSdk.instance.api.crateApiProtocolSignerNostrSignerNip44Decrypt(
          that: this, publicKey: publicKey, payload: payload);

  /// Encrypt
  Future<String> nip44Encrypt(
          {required PublicKey publicKey, required String content}) =>
      NostrSdk.instance.api.crateApiProtocolSignerNostrSignerNip44Encrypt(
          that: this, publicKey: publicKey, content: content);

  /// Sign event
  Future<Event> signEvent({required UnsignedEvent unsignedEvent}) =>
      NostrSdk.instance.api.crateApiProtocolSignerNostrSignerSignEvent(
          that: this, unsignedEvent: unsignedEvent);
}

@sealed
class PublicKeyImpl extends RustOpaque implements PublicKey {
  // Not to be used by end users
  PublicKeyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PublicKeyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_PublicKey,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_PublicKey,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_PublicKeyPtr,
  );

  /// Serialize to bech32
  String toBech32() =>
      NostrSdk.instance.api.crateApiProtocolKeyPublicKeyPublicKeyToBech32(
        that: this,
      );

  /// Serialize to hex
  String toHex() =>
      NostrSdk.instance.api.crateApiProtocolKeyPublicKeyPublicKeyToHex(
        that: this,
      );

  /// Serialize as nostr URI
  String toNostrUri() =>
      NostrSdk.instance.api.crateApiProtocolKeyPublicKeyPublicKeyToNostrUri(
        that: this,
      );
}

@sealed
class SecretKeyImpl extends RustOpaque implements SecretKey {
  // Not to be used by end users
  SecretKeyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SecretKeyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_SecretKey,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_SecretKey,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_SecretKeyPtr,
  );

  /// Serialize to bech32
  String toBech32() =>
      NostrSdk.instance.api.crateApiProtocolKeySecretKeySecretKeyToBech32(
        that: this,
      );

  /// Serialize to hex
  String toSecretHex() =>
      NostrSdk.instance.api.crateApiProtocolKeySecretKeySecretKeyToSecretHex(
        that: this,
      );
}

@sealed
class TagImpl extends RustOpaque implements Tag {
  // Not to be used by end users
  TagImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TagImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_Tag,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_Tag,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_TagPtr,
  );

  /// Get array of strings
  List<String> asVec() =>
      NostrSdk.instance.api.crateApiProtocolEventTagTagAsVec(
        that: this,
      );

  /// Return the **first** tag value (index `1`), if exists.
  String? content() => NostrSdk.instance.api.crateApiProtocolEventTagTagContent(
        that: this,
      );

  /// Check if it's a protected event tag
  ///
  /// <https://github.com/nostr-protocol/nips/blob/master/70.md>
  bool isProtected() =>
      NostrSdk.instance.api.crateApiProtocolEventTagTagIsProtected(
        that: this,
      );

  /// Check if is a standard event tag with `reply` marker
  bool isReply() => NostrSdk.instance.api.crateApiProtocolEventTagTagIsReply(
        that: this,
      );

  /// Check if is a standard event tag with `root` marker
  bool isRoot() => NostrSdk.instance.api.crateApiProtocolEventTagTagIsRoot(
        that: this,
      );

  /// Get tag kind
  String kind() => NostrSdk.instance.api.crateApiProtocolEventTagTagKind(
        that: this,
      );

  /// Get array of strings
  List<String> toVec() =>
      NostrSdk.instance.api.crateApiProtocolEventTagTagToVec(
        that: this,
      );
}

@sealed
class UnsignedEventImpl extends RustOpaque implements UnsignedEvent {
  // Not to be used by end users
  UnsignedEventImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UnsignedEventImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        NostrSdk.instance.api.rust_arc_increment_strong_count_UnsignedEvent,
    rustArcDecrementStrongCount:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_UnsignedEvent,
    rustArcDecrementStrongCountPtr:
        NostrSdk.instance.api.rust_arc_decrement_strong_count_UnsignedEventPtr,
  );

  /// Add signature to unsigned event
  ///
  /// Internally verify the event.
  Event addSignature({required String sig}) => NostrSdk.instance.api
      .crateApiProtocolEventUnsignedUnsignedEventAddSignature(
          that: this, sig: sig);

  /// Serialize as JSON
  String asJson() =>
      NostrSdk.instance.api.crateApiProtocolEventUnsignedUnsignedEventAsJson(
        that: this,
      );

  /// Serialize as pretty JSON
  String asPrettyJson() => NostrSdk.instance.api
          .crateApiProtocolEventUnsignedUnsignedEventAsPrettyJson(
        that: this,
      );

  /// Get author
  PublicKey author() =>
      NostrSdk.instance.api.crateApiProtocolEventUnsignedUnsignedEventAuthor(
        that: this,
      );

  /// Get content
  String content() =>
      NostrSdk.instance.api.crateApiProtocolEventUnsignedUnsignedEventContent(
        that: this,
      );

  /// Get UNIX timestamp
  BigInt createdAt() =>
      NostrSdk.instance.api.crateApiProtocolEventUnsignedUnsignedEventCreatedAt(
        that: this,
      );

  /// Get event ID
  String? id() =>
      NostrSdk.instance.api.crateApiProtocolEventUnsignedUnsignedEventId(
        that: this,
      );

  /// Get kind
  int kind() =>
      NostrSdk.instance.api.crateApiProtocolEventUnsignedUnsignedEventKind(
        that: this,
      );

  /// Get tags
  List<Tag> tags() =>
      NostrSdk.instance.api.crateApiProtocolEventUnsignedUnsignedEventTags(
        that: this,
      );
}
